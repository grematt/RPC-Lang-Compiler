#include "../dot_h/IfStatement.h"
#include "../dot_h/tokens.h"
#include "../dot_h/ir_utils.h"

llvm::Value* IfStatement::generate_ir() {
  static int id;

  auto parent_name {builder->GetInsertBlock()->getName().str()};
  auto condition_ir {condition->generate_ir()};
  if (!condition_ir)
    return nullptr;

  if (condition_ir->getType()->getTypeID() == llvm::Type::DoubleTyID)
    return post_error_msg("Conditions must be integer values");

  std::string true_name {"true_block" + std::to_string(id)};
  std::string false_name {"false_block" + std::to_string(id)};
  std::string end_name {"end_block" + std::to_string(id)};
  ++id;

  llvm::Function* parent_func {builder->GetInsertBlock()->getParent()};
  llvm::BasicBlock* true_block {llvm::BasicBlock::Create(*context, true_name)};
  llvm::BasicBlock* false_block {llvm::BasicBlock::Create(*context, false_name)};
  llvm::BasicBlock* end_block {llvm::BasicBlock::Create(*context, end_name)};

  // entry into true or false blocks
  builder->CreateCondBr(condition_ir, true_block, false_block);

  true_block = generate_block_ir(parent_name, 
    true_name, true_block, end_block, parent_func, std::move(body));

  false_block = generate_block_ir(parent_name, 
    false_name, false_block, end_block, parent_func, std::move(otherwise_body));

  if (!true_block || !false_block)
    return nullptr;

  // new block after if statement, variables defined inside statment
  // are now no longer in scope
  parent_func->insert(parent_func->end(), end_block);
  builder->SetInsertPoint(end_block);

  create_block_vars_entry(parent_name, end_name);

  // All of the IR generated by this method is put directly into
  // a block of the parent function. Conequently, there is 
  // no llvm::Value* that needs to be returned. To signify that
  // this method has completed without errors though,
  // a dummy Value* is returned that is never used. This is needed
  // as other generate_ir() methods in other classes do need to return
  // a Value*
  auto dummy {std::make_unique<Literal>(0, ch8_tok)};
  return dummy->generate_ir();
  return nullptr;
}