#include "../dot_h/WhileLoopStatement.h"
#include "../dot_h/tokens.h"
#include "../dot_h/ir_utils.h"

llvm::Value* WhileLoopStatement::generate_ir() {
  static int id;

  auto parent_name {builder->GetInsertBlock()->getName().str()};

  std::string loop_name {"while_loop" + std::to_string(id)};
  std::string loop_start_name {"while_loop_start" + std::to_string(id)};
  std::string loop_end_name {"while_loop_end" + std::to_string(id)};
  ++id;

  llvm::Function* parent_func {builder->GetInsertBlock()->getParent()};
  llvm::BasicBlock* loop_block {llvm::BasicBlock::Create(*context, loop_name)};
  llvm::BasicBlock* loop_start_block {llvm::BasicBlock::Create(*context, loop_start_name)};
  llvm::BasicBlock* loop_end_block {llvm::BasicBlock::Create(*context, loop_end_name)};

  // loop_start_block is where the condition is evaluated.
  parent_func->insert(parent_func->end(), loop_start_block);
  create_block_vars_entry(parent_name, loop_start_name);

  builder->CreateBr(loop_start_block);

  builder->SetInsertPoint(loop_start_block);

  auto condition_ir {condition->generate_ir()};
  if (!condition_ir)
    return nullptr;

  if (condition_ir->getType()->getTypeID() == llvm::Type::DoubleTyID)
    return post_error_msg("Conditions must be integer values");
    
  // if condition is false, go to loop_end_block, else enter loop_block
  builder->CreateCondBr(condition_ir, loop_block, loop_end_block);

  // populate loop block
  loop_block = generate_block_ir(parent_name, loop_name, 
    loop_block, loop_start_block, parent_func, std::move(body));

  if (!loop_block)
    return nullptr;

  parent_func->insert(parent_func->end(), loop_end_block);
  builder->SetInsertPoint(loop_end_block);

  create_block_vars_entry(parent_name, loop_end_name);

  // All of the IR generated by this method is put directly into
  // a block of the parent function. Conequently, there is 
  // no llvm::Value* that needs to be returned. To signify that
  // this method has completed without errors though,
  // a dummy Value* is returned that is never used. This is needed
  // as other generate_ir() methods in other classes do need to return
  // a Value*
  auto dummy {std::make_unique<Literal>(0, ch8_tok)};
  return dummy->generate_ir();
}
